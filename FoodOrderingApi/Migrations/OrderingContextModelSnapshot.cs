// <auto-generated />
using System;
using FoodOrderingApi.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FoodOrderingApi.Migrations
{
    [DbContext(typeof(OrderingContext))]
    partial class OrderingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FoodOrderingApi.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("CartId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("FoodOrderingApi.Models.MenuItem", b =>
                {
                    b.Property<int>("MenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("MenuItemId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            MenuItemId = 1,
                            Description = "Tomato, Cheese on base",
                            Name = "Pizza",
                            Price = 11.5
                        },
                        new
                        {
                            MenuItemId = 2,
                            Description = "Lots of Tomato, Cheese on base",
                            Name = "Big Pizza",
                            Price = 16.5
                        });
                });

            modelBuilder.Entity("FoodOrderingApi.Models.Order", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("TimePlaced")
                        .HasColumnType("datetime2");

                    b.HasKey("CartId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodOrderingApi.Models.Selection", b =>
                {
                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("SelectionPrice")
                        .HasColumnType("float");

                    b.HasKey("MenuItemId", "CartId");

                    b.HasIndex("CartId")
                        .IsUnique();

                    b.HasIndex("MenuItemId")
                        .IsUnique();

                    b.ToTable("Selections");
                });

            modelBuilder.Entity("FoodOrderingApi.Models.Cart", b =>
                {
                    b.HasOne("FoodOrderingApi.Models.Order", "Order")
                        .WithOne("Cart")
                        .HasForeignKey("FoodOrderingApi.Models.Cart", "CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FoodOrderingApi.Models.Selection", b =>
                {
                    b.HasOne("FoodOrderingApi.Models.Cart", null)
                        .WithMany("Selections")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodOrderingApi.Models.MenuItem", null)
                        .WithMany("Selections")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodOrderingApi.Models.Cart", b =>
                {
                    b.Navigation("Selections");
                });

            modelBuilder.Entity("FoodOrderingApi.Models.MenuItem", b =>
                {
                    b.Navigation("Selections");
                });

            modelBuilder.Entity("FoodOrderingApi.Models.Order", b =>
                {
                    b.Navigation("Cart");
                });
#pragma warning restore 612, 618
        }
    }
}
